import Fastify, { FastifyInstance, FastifyReply, FastifyRequest } from 'fastify';
import jwt from '@fastify/jwt';
import cors from '@fastify/cors';
import multipart from '@fastify/multipart';
import healthcheckRoutes from './routes/healthcheck.js';
import authRoutes from './routes/auth.js';
import mlRoutes from './routes/ml.js';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Fastify
const fastify: FastifyInstance = Fastify({
    logger: true
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
fastify.register(cors, {
    origin: ['http://localhost:8080', 'http://127.0.0.1:8080', 'http://localhost:5173', 'http://127.0.0.1:5173'],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
});
fastify.register(jwt, { secret: 'supersecret' });
fastify.register(multipart, {
    limits: {
        fileSize: 1000 * 1024 * 1024, // 1GB –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
fastify.decorate('authenticate', async function (request: FastifyRequest, reply: FastifyReply) {
    try {
        await request.jwtVerify();
    } catch (err) {
        reply.send(err);
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
fastify.register(healthcheckRoutes, { prefix: '/api' });
fastify.register(authRoutes, { prefix: '/api/auth' });
fastify.register(mlRoutes, { prefix: '/api/ml' });

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const start = async (): Promise<void> => {
    try {
        await fastify.listen({
            port: 3000,
            host: '0.0.0.0'
        });
        console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000');
        console.log('üìã Healthcheck –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000/api/health');
    } catch (err) {
        fastify.log.error(err);
        process.exit(1);
    }
};

start();
