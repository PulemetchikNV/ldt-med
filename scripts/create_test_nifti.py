#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ NIfTI —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–∞
"""

import numpy as np
import nibabel as nib
import os

def create_test_nifti():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π NIfTI —Ñ–∞–π–ª —Å –ø—Ä–æ—Å—Ç–æ–π 3D —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('test_data', exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º 3D –º–∞—Å—Å–∏–≤ (64x64x32)
    data = np.zeros((64, 64, 32), dtype=np.float32)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É - "–º–æ–∑–≥"
    for z in range(32):
        for y in range(64):
            for x in range(64):
                # –°–æ–∑–¥–∞–µ–º —ç–ª–ª–∏–ø—Å–æ–∏–¥ (—Ñ–æ—Ä–º–∞ –º–æ–∑–≥–∞)
                center_x, center_y = 32, 32
                radius_x, radius_y = 25, 25
                
                if ((x - center_x) / radius_x) ** 2 + ((y - center_y) / radius_y) ** 2 <= 1:
                    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç
                    noise = np.random.normal(0, 0.1)
                    gradient = z / 32.0
                    data[x, y, z] = 0.5 + gradient * 0.3 + noise
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º "–æ–ø—É—Ö–æ–ª—å" –≤ —Ü–µ–Ω—Ç—Ä–µ
                    if 20 <= x <= 44 and 20 <= y <= 44 and 10 <= z <= 22:
                        tumor_intensity = 0.8 + np.random.normal(0, 0.05)
                        data[x, y, z] = max(data[x, y, z], tumor_intensity)
    
    # –°–æ–∑–¥–∞–µ–º NIfTI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    affine = np.eye(4)
    nii_img = nib.Nifti1Image(data, affine)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    output_path = 'test_data/test_brain.nii.gz'
    nib.save(nii_img, output_path)
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π NIfTI —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {data.shape}")
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(output_path)} –±–∞–π—Ç")
    
    return output_path

if __name__ == "__main__":
    create_test_nifti()
