#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ DICOM —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–µ—Ä–≤–∏—Å–∞
"""

import pydicom
from pydicom.dataset import Dataset, FileDataset
from pydicom.uid import generate_uid
import numpy as np
import tempfile
import zipfile
import os
from datetime import datetime

def create_basic_dicom(filename, modality='MR', series_description='T1'):
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π DICOM —Ñ–∞–π–ª"""
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (256x256 –ø–∏–∫—Å–µ–ª–µ–π)
    image_data = np.random.randint(0, 4096, (256, 256), dtype=np.uint16)
    
    # –°–æ–∑–¥–∞–µ–º Dataset
    ds = Dataset()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ DICOM —Ç–µ–≥–∏
    ds.PatientName = "Test^Patient"
    ds.PatientID = "TEST001"
    ds.StudyInstanceUID = generate_uid()
    ds.SeriesInstanceUID = generate_uid()
    ds.SOPInstanceUID = generate_uid()
    ds.SOPClassUID = '1.2.840.10008.5.1.4.1.1.4'  # MR Image Storage
    
    # –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    ds.Modality = modality
    ds.SeriesDescription = series_description
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ds.Rows = 256
    ds.Columns = 256
    ds.BitsAllocated = 16
    ds.BitsStored = 16
    ds.HighBit = 15
    ds.PixelRepresentation = 0
    ds.SamplesPerPixel = 1
    ds.PhotometricInterpretation = 'MONOCHROME2'
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ds.PixelData = image_data.tobytes()
    
    # –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    file_meta = Dataset()
    file_meta.MediaStorageSOPClassUID = ds.SOPClassUID
    file_meta.MediaStorageSOPInstanceUID = ds.SOPInstanceUID
    file_meta.TransferSyntaxUID = '1.2.840.10008.1.2.1'  # Explicit VR Little Endian
    file_meta.ImplementationClassUID = generate_uid()
    
    # –°–æ–∑–¥–∞–µ–º FileDataset
    file_ds = FileDataset(filename, ds, file_meta=file_meta, preamble=b"\0" * 128)
    
    return file_ds

def create_test_dicom_zip():
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ DICOM —Ñ–∞–π–ª–∞–º–∏"""
    
    os.makedirs('test_data', exist_ok=True)
    zip_path = 'test_data/real_dicom_test.zip'
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ DICOM —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π
        modalities = [
            ('T1', 'T1-weighted'),
            ('T2', 'T2-weighted'),
            ('T1C', 'T1-weighted with contrast'),
            ('FLAIR', 'FLAIR')
        ]
        
        for i, (mod, desc) in enumerate(modalities):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DICOM —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.dcm', delete=False) as tmp:
                ds = create_basic_dicom(tmp.name, 'MR', desc)
                ds.save()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ ZIP –∞—Ä—Ö–∏–≤
                dicom_name = f"series_{mod.lower()}_{i:03d}.dcm"
                zipf.write(tmp.name, dicom_name)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(tmp.name)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–∞–ª–∏–¥–Ω—ã–π DICOM ZIP: {zip_path}")
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(zip_path)} –±–∞–π—Ç")
    print(f"üìä –°–æ–¥–µ—Ä–∂–∏—Ç: {len(modalities)} DICOM —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π")
    
    return zip_path

if __name__ == "__main__":
    try:
        create_test_dicom_zip()
    except ImportError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pydicom")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pydicom")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
